
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Nov 08 16:41:07 CET 2017
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.List;
import java.util.HashMap;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Nov 08 16:41:07 CET 2017
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\005\002\000\002\004\006\000\002\002" +
    "\004\000\002\004\005\000\002\006\002\000\002\004\006" +
    "\000\002\004\004\000\002\004\005\000\002\004\002\000" +
    "\002\003\005\000\002\002\005\000\002\002\005\000\002" +
    "\002\005\000\002\002\003\000\002\002\003\000\002\002" +
    "\004\000\002\002\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\024\002\ufff9\003\012\004\006\005\011\010" +
    "\015\011\013\012\005\014\004\015\010\001\002\000\012" +
    "\006\ufff1\007\ufff1\015\ufff1\016\043\001\002\000\014\004" +
    "\006\005\011\010\015\012\005\014\023\001\002\000\012" +
    "\006\ufff4\007\ufff4\013\ufff4\015\ufff4\001\002\000\004\002" +
    "\040\001\002\000\024\002\ufff9\003\012\004\006\005\011" +
    "\010\015\011\013\012\005\014\004\015\010\001\002\000" +
    "\012\006\ufff3\007\ufff3\013\ufff3\015\ufff3\001\002\000\004" +
    "\015\035\001\002\000\004\015\ufffd\001\002\000\004\015" +
    "\030\001\002\000\014\004\006\005\011\010\015\012\005" +
    "\014\023\001\002\000\010\006\020\007\021\015\001\001" +
    "\002\000\004\015\025\001\002\000\014\004\006\005\011" +
    "\010\015\012\005\014\023\001\002\000\014\004\006\005" +
    "\011\010\015\012\005\014\023\001\002\000\012\006\ufff6" +
    "\007\ufff6\013\ufff6\015\ufff6\001\002\000\012\006\ufff1\007" +
    "\ufff1\013\ufff1\015\ufff1\001\002\000\012\006\ufff7\007\ufff7" +
    "\013\ufff7\015\ufff7\001\002\000\024\002\ufff9\003\012\004" +
    "\006\005\011\010\015\011\013\012\005\014\004\015\010" +
    "\001\002\000\004\002\000\001\002\000\012\006\020\007" +
    "\021\013\ufff2\015\ufff2\001\002\000\024\002\ufff9\003\012" +
    "\004\006\005\011\010\015\011\013\012\005\014\004\015" +
    "\010\001\002\000\004\002\ufffe\001\002\000\004\015\033" +
    "\001\002\000\024\002\ufff9\003\012\004\006\005\011\010" +
    "\015\011\013\012\005\014\004\015\010\001\002\000\004" +
    "\002\ufffc\001\002\000\024\002\ufff9\003\012\004\006\005" +
    "\011\010\015\011\013\012\005\014\004\015\010\001\002" +
    "\000\004\002\ufffa\001\002\000\004\002\ufffb\001\002\000" +
    "\004\002\uffff\001\002\000\010\006\020\007\021\013\042" +
    "\001\002\000\012\006\ufff5\007\ufff5\013\ufff5\015\ufff5\001" +
    "\002\000\014\004\006\005\011\010\015\012\005\014\023" +
    "\001\002\000\010\006\020\007\021\015\ufff8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\042\000\010\002\015\003\013\004\006\001\001\000" +
    "\002\001\001\000\004\002\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\015\003\013\004\036\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\006\031" +
    "\001\001\000\002\001\001\000\004\002\026\001\001\000" +
    "\004\005\016\001\001\000\002\001\001\000\004\002\023" +
    "\001\001\000\004\002\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\002\015\003\013" +
    "\004\025\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\002\015\003\013\004\030\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\015\003\013\004\033\001" +
    "\001\000\002\001\001\000\010\002\015\003\013\004\035" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\002\043" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



	public static void main(String args[]) throws Exception{
			new parser(new Yylex(System.in)).parse();
	}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {


	public class TabSym{
		HashMap<String,Boolean> tab;

		public TabSym(){
			tab = new HashMap<String,Boolean>();
		}

		public TabSym add(String s,Boolean b){
			tab.put(s,b);
			return this;
		}

		public Boolean getBool(String s){
			return tab.get(s);
		}

		@Override
		public String toString(){
			String res = new String();
			res = res + "==> les valeurs des variables sont :\n";
			for(String key : tab.keySet()){
				res = res + key + " vaut " + tab.get(key) + "\n";
			}
			return res;
		}
	}

	TabSym tabSym = new TabSym();


  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // logique ::= IDENT 
            {
              Boolean RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = tabSym.getBool(i) ;
				if (tabSym.getBool(i) == null)
				System.out.println("==> valeur de "+i+" n'existe pas");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logique",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // logique ::= NOT logique 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = !l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logique",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // logique ::= FALSE 
            {
              Boolean RESULT =null;
		RESULT = false;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logique",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // logique ::= TRUE 
            {
              Boolean RESULT =null;
		 RESULT = true;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logique",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // logique ::= PARO logique PARF 
            {
              Boolean RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = l;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logique",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // logique ::= logique OR logique 
            {
              Boolean RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean l1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		if((l1 == null) | (l2 == null)) RESULT = null;
						else
						RESULT = (l1 | l2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logique",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // logique ::= logique AND logique 
            {
              Boolean RESULT =null;
		int l1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int l1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Boolean l1 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int l2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int l2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l2 = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 if((l1 == null) | (l2 == null)) RESULT = null;
					else
					RESULT = ( l1 & l2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("logique",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // affect ::= IDENT EQ logique 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 	if (l != null) {tabSym.add(id,l);
					
					System.out.println("==> "+id+" vaut "+l);}
					else
					System.out.println("==> valeur non initialisee");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("affect",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prog ::= 
            {
              Object RESULT =null;
		System.out.println("==> Au revoir");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // prog ::= error NL prog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // prog ::= NL prog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // prog ::= PRINT NT$1 NL prog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // NT$1 ::= 
            {
              Object RESULT =null;
 System.out.print(tabSym.toString());
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$1",4, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // prog ::= affect NL prog 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= prog EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // prog ::= logique NT$0 NL prog 
            {
              Object RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("prog",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Boolean l = (Boolean)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
 if(l == null) System.out.println("==> operation non effectue");
			else 
			System.out.println("==> " +l);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NT$0",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

